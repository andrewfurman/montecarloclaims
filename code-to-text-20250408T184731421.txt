### FILE TREE (SELECTED)

├─ .upm
|  └─ store.json (2 lines)
├─ static
|  └─ script.js (267 lines)
├─ templates
|  └─ index.html (192 lines)
├─ main.py (193 lines)
├─ pyproject.toml (25 lines)
├─ .replit (17 lines)


### FILE CONTENTS

FILE: .upm/store.json
----------------------------------------
{"version":2,"languages":{"python-python3-poetry":{"specfileHash":"8c76fdd00681289feff23e47db490e42","lockfileHash":"c504117a450108efe68b75b0928af49d"}}}


FILE: static/script.js
----------------------------------------
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('simulation-form');
    const runButton = document.getElementById('run_simulation_btn');
    const loadingIndicator = document.getElementById('loading_indicator');
    const outputsSection = document.getElementById('outputs-section');
    const errorMessageDiv = document.getElementById('error_message');

    // Input elements for dynamic cost display
    const numMembersInput = document.getElementById('num_members');
    const costMinPmInput = document.getElementById('path_a_cost_min_pm');
    const costMaxPmInput = document.getElementById('path_a_cost_max_pm');
    const totalCostDisplay = document.getElementById('path_a_total_cost_display');

    // Output elements
    const pathAAveNpvEl = document.getElementById('path_a_avg_npv');
    const pathBAveNpvEl = document.getElementById('path_b_avg_npv');
    const pathANegProbEl = document.getElementById('path_a_neg_prob');
    const pathBNegProbEl = document.getElementById('path_b_neg_prob');
    const probBBeatsAEl = document.getElementById('prob_b_beats_a');
    const pathARoiProbEl = document.getElementById('path_a_roi_prob');
    const pathBRoiProbEl = document.getElementById('path_b_roi_prob');
    const pathAMinNpvEl = document.getElementById('path_a_min_npv');
    const pathAMaxNpvEl = document.getElementById('path_a_max_npv');
    const pathBMinNpvEl = document.getElementById('path_b_min_npv');
    const pathBMaxNpvEl = document.getElementById('path_b_max_npv');

    let npvChart = null; // Variable to hold the chart instance

    // --- Helper Functions ---
    function formatMillions(value) {
        if (value === null || value === undefined || isNaN(value)) return '--';
        return (value / 1000000).toFixed(1); // Format to one decimal place in millions
    }

     function formatMillionsRange(minVal, maxVal) {
         if (minVal === null || maxVal === null || isNaN(minVal) || isNaN(maxVal)) return '--';
         const minM = (minVal / 1000000).toFixed(0);
         const maxM = (maxVal / 1000000).toFixed(0);
         return `${minM}M - ${maxM}M`;
     }

    function formatPercentage(value) {
        if (value === null || value === undefined || isNaN(value)) return '--';
        return value.toFixed(1); // Keep one decimal place for percentages
    }

    function calculateAndDisplayTotalCost() {
         const members = parseInt(numMembersInput.value) || 0;
         const minCost = parseFloat(costMinPmInput.value) || 0;
         const maxCost = parseFloat(costMaxPmInput.value) || 0;
         totalCostDisplay.textContent = formatMillionsRange(members * minCost, members * maxCost);
    }

    // Initial calculation and listeners for dynamic cost display
    calculateAndDisplayTotalCost();
    numMembersInput.addEventListener('input', calculateAndDisplayTotalCost);
    costMinPmInput.addEventListener('input', calculateAndDisplayTotalCost);
    costMaxPmInput.addEventListener('input', calculateAndDisplayTotalCost);


    // --- Charting Function ---
    function createOrUpdateNpvChart(npvAData, npvBData) {
        const ctx = document.getElementById('npv_chart').getContext('2d');

        if (!npvAData || !npvBData || npvAData.length === 0 || npvBData.length === 0) {
             console.warn("Not enough data to generate NPV chart.");
            // Optionally display a message on the canvas
             if (npvChart) {
                npvChart.destroy(); // Clear previous chart if data is bad
                npvChart = null;
            }
             ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
             ctx.font = "16px Arial";
             ctx.fillStyle = "grey";
             ctx.textAlign = "center";
             ctx.fillText("Insufficient data for chart.", ctx.canvas.width / 2, ctx.canvas.height / 2);
             return;
        }

        // --- Histogram Binning Logic ---
        const allData = [...npvAData, ...npvBData];
        const minVal = Math.min(...allData);
        const maxVal = Math.max(...allData);
        // Determine number of bins (e.g., using Sturges' formula or Freedman-Diaconis rule, or simpler fixed number)
        const numBins = 25; // Adjust for desired granularity
        const binWidth = (maxVal - minVal) / numBins || 1; // Avoid division by zero if max=min

        const bins = Array(numBins).fill(0).map((_, i) => minVal + i * binWidth);
        const labels = bins.map((binStart, i) => {
            const binEnd = binStart + binWidth;
            // Format bin labels as millions
            return `${formatMillions(binStart)} - ${formatMillions(binEnd)}`;
        });

        const histA = Array(numBins).fill(0);
        const histB = Array(numBins).fill(0);

        npvAData.forEach(val => {
            let binIndex = Math.floor((val - minVal) / binWidth);
            // Handle edge case where value equals maxVal
             if (binIndex === numBins) binIndex--;
            if (binIndex >= 0 && binIndex < numBins) {
                 histA[binIndex]++;
            } else if (val === minVal) { // Ensure minVal gets included in the first bin
                histA[0]++;
            }
        });
         npvBData.forEach(val => {
            let binIndex = Math.floor((val - minVal) / binWidth);
             if (binIndex === numBins) binIndex--;
             if (binIndex >= 0 && binIndex < numBins) {
                 histB[binIndex]++;
            } else if (val === minVal) {
                histB[0]++;
            }
        });
        // --- End Binning Logic ---


        const chartData = {
            labels: labels,
            datasets: [
                {
                    label: 'Path A (Traditional) NPV Freq.',
                    data: histA,
                    backgroundColor: 'rgba(54, 162, 235, 0.6)', // Blue
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1,
                    barPercentage: 1.0, // Make bars touch
                    categoryPercentage: 1.0 // Make bars touch
                },
                {
                    label: 'Path B (AI Invest) NPV Freq.',
                    data: histB,
                    backgroundColor: 'rgba(75, 192, 192, 0.6)', // Green
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1,
                     barPercentage: 1.0,
                     categoryPercentage: 1.0
                }
            ]
        };

        const config = {
            type: 'bar',
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false, // Allow chart to resize vertically
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'NPV Range (Millions $)'
                        },
                        ticks: {
                           maxRotation: 60, // Rotate labels if they overlap
                           minRotation: 30
                       }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Frequency (Number of Runs)'
                        }
                    }
                },
                 plugins: {
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                    },
                    legend: {
                        position: 'top',
                    }
                },
                animation: {
                   duration: 500 // Shorter animation
                }
            }
        };

        if (npvChart) {
            npvChart.data = chartData;
            npvChart.options = config.options; // Ensure options are updated too
            npvChart.update();
        } else {
            npvChart = new Chart(ctx, config);
        }
    }


    // --- Form Submission Handler ---
    form.addEventListener('submit', async (event) => {
        event.preventDefault(); // Prevent default page reload
        runButton.disabled = true;
        loadingIndicator.classList.remove('hidden');
        outputsSection.classList.add('hidden'); // Hide previous results
        errorMessageDiv.classList.add('hidden'); // Hide previous errors

        // Gather form data
        const formData = new FormData(form);
        const payload = {};
        for (let [key, value] of formData.entries()) {
            // Convert numeric fields to numbers, leave others as strings if needed
            const numValue = parseFloat(value);
            payload[key] = isNaN(numValue) ? value : numValue;
        }

        // Basic Client-side Validation Example (add more as needed)
        if (payload.num_runs > 10000) {
            errorMessageDiv.textContent = "Please limit simulation runs to 10,000 for browser performance.";
            errorMessageDiv.classList.remove('hidden');
            loadingIndicator.classList.add('hidden');
            runButton.disabled = false;
            return; // Stop submission
        }
        // Add checks for min <= max ranges


        try {
            const response = await fetch('/simulate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            });

            const results = await response.json();

            if (!response.ok || results.error) {
                throw new Error(results.error || `HTTP error! status: ${response.status}`);
            }

            // Update Output Metrics
            pathAAveNpvEl.textContent = formatMillions(results.avg_npv_a);
            pathBAveNpvEl.textContent = formatMillions(results.avg_npv_b);
            pathANegProbEl.textContent = formatPercentage(results.prob_neg_a);
            pathBNegProbEl.textContent = formatPercentage(results.prob_neg_b);
            probBBeatsAEl.textContent = formatPercentage(results.prob_b_beats_a);
            pathARoiProbEl.textContent = formatPercentage(results.prob_roi_a);
            pathBRoiProbEl.textContent = formatPercentage(results.prob_roi_b); // Placeholder
            pathAMinNpvEl.textContent = formatMillions(results.min_npv_a);
            pathAMaxNpvEl.textContent = formatMillions(results.max_npv_a);
            pathBMinNpvEl.textContent = formatMillions(results.min_npv_b);
            pathBMaxNpvEl.textContent = formatMillions(results.max_npv_b);


            // Update Chart
            createOrUpdateNpvChart(results.npv_a_raw, results.npv_b_raw);

            // Show results
            outputsSection.classList.remove('hidden');

        } catch (error) {
            console.error('Simulation Error:', error);
            errorMessageDiv.textContent = `Simulation failed: ${error.message}`;
            errorMessageDiv.classList.remove('hidden');
        } finally {
            loadingIndicator.classList.add('hidden');
            runButton.disabled = false;
        }
    });

}); // End DOMContentLoaded

FILE: templates/index.html
----------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Claims System Modernization: Monte Carlo Analysis</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="{{ url_for('static', filename='script.js') }}" defer></script>
</head>
<body class="bg-gray-100 font-sans">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-center text-gray-800 mb-8">Claims System Modernization: Monte Carlo Risk Analysis</h1>

        <form id="simulation-form">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">

                <fieldset class="bg-white p-6 rounded-lg shadow">
                    <legend class="text-xl font-semibold mb-4 text-gray-700">Overall Parameters</legend>
                    <div class="space-y-4">
                        <div>
                            <label for="num_members" class="block text-sm font-medium text-gray-600">Number of Members</label>
                            <input type="number" id="num_members" name="num_members" value="3000000" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                            <p class="mt-1 text-xs text-gray-500">Total members covered.</p>
                        </div>
                        <div>
                            <label for="discount_rate" class="block text-sm font-medium text-gray-600">Annual Discount Rate (%)</label>
                            <input type="number" id="discount_rate" name="discount_rate" value="5" step="0.1" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                            <p class="mt-1 text-xs text-gray-500">Rate for NPV calculation.</p>
                        </div>
                        <div>
                            <label for="sim_years" class="block text-sm font-medium text-gray-600">Simulation Horizon (Years)</label>
                            <input type="number" id="sim_years" name="sim_years" value="10" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                            <p class="mt-1 text-xs text-gray-500">Simulation duration.</p>
                        </div>
                         <div>
                            <label for="target_roi" class="block text-sm font-medium text-gray-600">Target ROI (%)</label>
                            <input type="number" id="target_roi" name="target_roi" value="15" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                            <p class="mt-1 text-xs text-gray-500">Target ROI for probability calculation (Path A mainly).</p>
                        </div>
                        <div>
                            <label for="num_runs" class="block text-sm font-medium text-gray-600">Monte Carlo Iterations</label>
                            <input type="number" id="num_runs" name="num_runs" value="5000" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                            <p class="mt-1 text-xs text-gray-500">More runs = more accuracy (max ~10k recommended for browser performance).</p>
                        </div>
                    </div>
                </fieldset>

                <fieldset class="bg-white p-6 rounded-lg shadow">
                    <legend class="text-xl font-semibold mb-4 text-blue-600">Path A: Traditional Implementation</legend>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-600">Migration Cost per Member ($ Range)</label>
                            <div class="flex space-x-2 mt-1">
                                <input type="number" id="path_a_cost_min_pm" name="path_a_cost_min_pm" value="100" placeholder="Min" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                                <input type="number" id="path_a_cost_max_pm" name="path_a_cost_max_pm" value="150" placeholder="Max" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                            </div>
                            <p class="mt-1 text-xs text-gray-500">Est. Total: $<span id="path_a_total_cost_display" class="font-medium">300M - 450M</span></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-600">Implementation Duration (Years Range)</label>
                            <div class="flex space-x-2 mt-1">
                                <input type="number" id="path_a_duration_min" name="path_a_duration_min" value="3" placeholder="Min" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                                <input type="number" id="path_a_duration_max" name="path_a_duration_max" value="6" placeholder="Max" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-600">Annual Savings/Benefits ($M Range)</label>
                             <div class="flex space-x-2 mt-1">
                                <input type="number" id="path_a_benefits_min_pa_m" name="path_a_benefits_min_pa_m" value="10" placeholder="Min" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                                <input type="number" id="path_a_benefits_max_pa_m" name="path_a_benefits_max_pa_m" value="25" placeholder="Max" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                            </div>
                            <p class="mt-1 text-xs text-gray-500">Annual savings if not disrupted.</p>
                        </div>
                        <div>
                             <label for="path_a_obsolescence_risk" class="block text-sm font-medium text-gray-600">AI Obsolescence Risk (% Annual Increase)</label>
                            <div class="flex space-x-2 mt-1">
                                <input type="number" id="path_a_obsolescence_risk" name="path_a_obsolescence_risk" value="10" placeholder="Risk %" class="block w-1/2 p-2 border border-gray-300 rounded-md shadow-sm">
                                <input type="number" id="path_a_obsolescence_start_year" name="path_a_obsolescence_start_year" value="3" placeholder="Start Yr" class="block w-1/2 p-2 border border-gray-300 rounded-md shadow-sm">
                            </div>
                             <p class="mt-1 text-xs text-gray-500">Benefit degradation risk % per year, starting after year X post-implementation.</p>
                        </div>
                    </div>
                </fieldset>

                <fieldset class="bg-white p-6 rounded-lg shadow">
                     <legend class="text-xl font-semibold mb-4 text-green-600">Path B: Targeted AI Investments</legend>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-600">Annual AI Investment ($M Range)</label>
                            <div class="flex space-x-2 mt-1">
                                <input type="number" id="path_b_cost_min_pa_m" name="path_b_cost_min_pa_m" value="5" placeholder="Min" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                                <input type="number" id="path_b_cost_max_pa_m" name="path_b_cost_max_pa_m" value="20" placeholder="Max" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                            </div>
                        </div>
                        <div>
                            <label for="path_b_duration" class="block text-sm font-medium text-gray-600">AI Investment Duration (Years)</label>
                            <input type="number" id="path_b_duration" name="path_b_duration" value="3" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                        </div>
                        <div>
                            <label for="path_b_success_prob" class="block text-sm font-medium text-gray-600">Probability of High Impact Success (%)</label>
                            <input type="number" id="path_b_success_prob" name="path_b_success_prob" value="60" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                        </div>
                         <div>
                            <label class="block text-sm font-medium text-gray-600">Annual AI Savings/Benefits ($M Range, if successful)</label>
                             <div class="flex space-x-2 mt-1">
                                <input type="number" id="path_b_benefits_min_pa_m" name="path_b_benefits_min_pa_m" value="15" placeholder="Min" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                                <input type="number" id="path_b_benefits_max_pa_m" name="path_b_benefits_max_pa_m" value="50" placeholder="Max" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                            </div>
                        </div>
                         <div>
                            <label class="block text-sm font-medium text-gray-600">Annual Cost of Delay ($M Range)</label>
                             <div class="flex space-x-2 mt-1">
                                <input type="number" id="path_b_delay_cost_min_pa_m" name="path_b_delay_cost_min_pa_m" value="5" placeholder="Min" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                                <input type="number" id="path_b_delay_cost_max_pa_m" name="path_b_delay_cost_max_pa_m" value="10" placeholder="Max" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                            </div>
                             <p class="mt-1 text-xs text-gray-500">Cost of *not* having the traditional system while investing in AI.</p>
                        </div>
                    </div>
                </fieldset>
            </div>

            <div class="text-center mb-8">
                <button id="run_simulation_btn" type="submit" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-150 ease-in-out">
                    Run Simulation
                </button>
                <div id="loading_indicator" class="hidden mt-4 text-indigo-600">
                    <svg class="animate-spin h-5 w-5 mr-3 inline-block" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                    Running simulation...
                </div>
                 <div id="error_message" class="hidden mt-4 text-red-600 font-medium"></div>
            </div>
        </form>

        <div id="outputs-section" class="bg-white p-6 rounded-lg shadow mb-8 hidden">
            <h2 class="text-2xl font-semibold mb-6 text-gray-800 text-center">Simulation Results</h2>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                <div>
                    <h3 class="text-lg font-semibold mb-3 text-gray-700">Key Metrics Comparison</h3>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Metric</th>
                                    <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Path A (Traditional)</th>
                                    <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Path B (AI Invest)</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                <tr>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Avg. NPV</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">$<span id="path_a_avg_npv">--</span>M</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">$<span id="path_b_avg_npv">--</span>M</td>
                                </tr>
                                <tr>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Risk of Negative NPV</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center"><span id="path_a_neg_prob">--</span>%</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center"><span id="path_b_neg_prob">--</span>%</td>
                                </tr>
                                 <tr>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Prob. >= Target ROI</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center"><span id="path_a_roi_prob">--</span>%</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center"><span id="path_b_roi_prob">--</span>%</td>
                                </tr>
                                <tr>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Prob. Path B Outperforms Path A</td>
                                    <td colspan="2" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center"><span id="prob_b_beats_a">--</span>%</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                     <div class="mt-4 text-center">
                         <h4 class="text-md font-semibold mb-1 text-gray-700">Scenario Extremes (NPV)</h4>
                         <p class="text-sm text-gray-600">Path A: Best $<span id="path_a_max_npv">--</span>M / Worst $<span id="path_a_min_npv">--</span>M</p>
                         <p class="text-sm text-gray-600">Path B: Best $<span id="path_b_max_npv">--</span>M / Worst $<span id="path_b_min_npv">--</span>M</p>
                     </div>
                </div>

                <div>
                    <h3 class="text-lg font-semibold mb-3 text-gray-700">NPV Distribution (Millions $)</h3>
                    <div class="bg-gray-50 p-4 rounded-lg">
                         <canvas id="npv_chart"></canvas>
                    </div>
                </div>
            </div>

            </div> </div> </body>
</html>

FILE: main.py
----------------------------------------
from flask import Flask, render_template, request, jsonify
import numpy as np
import math # Import math for isnan check

app = Flask(__name__)

def perform_monte_carlo(data):
    """Performs the Monte Carlo simulation based on input data."""
    try:
        # --- Extract Inputs ---
        num_members = int(data.get('num_members', 3000000))
        discount_rate = float(data.get('discount_rate', 5)) / 100.0
        sim_years = int(data.get('sim_years', 10))
        num_runs = int(data.get('num_runs', 5000))

        # Path A Inputs
        cost_min_pm = float(data.get('path_a_cost_min_pm', 100))
        cost_max_pm = float(data.get('path_a_cost_max_pm', 150))
        duration_min = int(data.get('path_a_duration_min', 3))
        duration_max = int(data.get('path_a_duration_max', 6))
        benefits_min_pa_m = float(data.get('path_a_benefits_min_pa_m', 10)) * 1_000_000
        benefits_max_pa_m = float(data.get('path_a_benefits_max_pa_m', 25)) * 1_000_000
        obsolescence_risk = float(data.get('path_a_obsolescence_risk', 10)) / 100.0
        obsolescence_start_year = int(data.get('path_a_obsolescence_start_year', 3))

        # Path B Inputs
        ai_cost_min_pa_m = float(data.get('path_b_cost_min_pa_m', 5)) * 1_000_000
        ai_cost_max_pa_m = float(data.get('path_b_cost_max_pa_m', 20)) * 1_000_000
        ai_duration = int(data.get('path_b_duration', 3))
        ai_success_prob = float(data.get('path_b_success_prob', 60)) / 100.0
        ai_benefits_min_pa_m = float(data.get('path_b_benefits_min_pa_m', 15)) * 1_000_000
        ai_benefits_max_pa_m = float(data.get('path_b_benefits_max_pa_m', 50)) * 1_000_000
        delay_cost_min_pa_m = float(data.get('path_b_delay_cost_min_pa_m', 5)) * 1_000_000
        delay_cost_max_pa_m = float(data.get('path_b_delay_cost_max_pa_m', 10)) * 1_000_000

        # Target ROI (Add if you have an input for it, otherwise assume 0 for prob calculation)
        target_roi_input = data.get('target_roi', 0) # Expecting a whole number percentage
        target_roi = float(target_roi_input) / 100.0 if target_roi_input else 0.0


        # --- Simulation Loop ---
        npv_a_results = []
        npv_b_results = []
        path_a_total_costs = [] # Store total cost for ROI calc

        for _ in range(num_runs):
            # Sample uncertain variables for this run
            cost_pm = np.random.uniform(cost_min_pm, cost_max_pm)
            impl_duration = np.random.randint(duration_min, duration_max + 1)
            annual_benefits_a = np.random.uniform(benefits_min_pa_m, benefits_max_pa_m)

            ai_annual_cost = np.random.uniform(ai_cost_min_pa_m, ai_cost_max_pa_m)
            ai_annual_benefits = np.random.uniform(ai_benefits_min_pa_m, ai_benefits_max_pa_m)
            ai_succeeds = np.random.rand() < ai_success_prob
            annual_delay_cost = np.random.uniform(delay_cost_min_pa_m, delay_cost_max_pa_m)

            # --- Calculate Cash Flows ---
            cf_a = np.zeros(sim_years)
            cf_b = np.zeros(sim_years)

            # Path A: Traditional Implementation
            total_impl_cost = cost_pm * num_members
            path_a_total_costs.append(total_impl_cost) # Store for ROI
            if impl_duration > 0:
                annual_impl_cost = total_impl_cost / impl_duration
                for year in range(min(impl_duration, sim_years)):
                    cf_a[year] -= annual_impl_cost

            current_benefits_a = annual_benefits_a
            for year in range(impl_duration, sim_years):
                # Apply obsolescence reduction
                if year >= (impl_duration + obsolescence_start_year -1) : # -1 because index starts at 0
                     current_benefits_a *= (1 - obsolescence_risk)
                cf_a[year] += max(0, current_benefits_a) # Ensure benefits don't go negative


            # Path B: AI Investment
            for year in range(min(ai_duration, sim_years)):
                cf_b[year] -= ai_annual_cost
                cf_b[year] -= annual_delay_cost # Incur delay cost while investing in AI

            if ai_succeeds:
                for year in range(ai_duration, sim_years):
                    cf_b[year] += ai_annual_benefits
            else:
                 # If AI fails, still incur delay cost until sim end? Or assume trad path starts?
                 # Simplification: If AI fails, no benefits, but also stop delay cost after AI investment period.
                 # More complex: Model starting trad path if AI fails - outside scope of simple version.
                 pass


            # --- Calculate NPV ---
            # We need to add the initial investment (year 0) for np.npv calculation
            # For simplicity, let's adjust cash flows to be year 1 onwards and calculate NPV manually
            # Or, assume costs/benefits start accruing *after* year 0
            # Let's use np.npv assuming cf arrays represent cash flows starting at the end of year 1
            # np.npv requires rate and then values for year 1, 2, ...
            # It doesn't inherently include year 0 investment unless you add it separately.
            # Let's calculate manually for clarity, including year 0 implicitly if costs start then

            npv_a = 0
            for year in range(sim_years):
                 npv_a += cf_a[year] / ((1 + discount_rate) ** (year + 1)) # year+1 because cf[0] is end of year 1

            npv_b = 0
            for year in range(sim_years):
                 npv_b += cf_b[year] / ((1 + discount_rate) ** (year + 1))

            npv_a_results.append(npv_a)
            npv_b_results.append(npv_b)


        # --- Aggregate Results ---
        npv_a_results = np.array(npv_a_results)
        npv_b_results = np.array(npv_b_results)
        path_a_total_costs = np.array(path_a_total_costs)

        # Filter out potential NaN/inf values if any calculation errors occur
        npv_a_clean = npv_a_results[np.isfinite(npv_a_results)]
        npv_b_clean = npv_b_results[np.isfinite(npv_b_results)]
        costs_a_clean = path_a_total_costs[np.isfinite(path_a_total_costs) & (path_a_total_costs > 0)]

        if len(npv_a_clean) == 0 or len(npv_b_clean) == 0:
             return {"error": "Simulation resulted in invalid numerical values. Check inputs."}


        avg_npv_a = np.mean(npv_a_clean) if len(npv_a_clean) > 0 else 0
        avg_npv_b = np.mean(npv_b_clean) if len(npv_b_clean) > 0 else 0

        # Basic ROI calculation for Path A (NPV / Avg Total Cost)
        # Path B ROI is harder without defining total investment clearly for NPV calc. Focus on NPV.
        avg_cost_a = np.mean(costs_a_clean) if len(costs_a_clean) > 0 else 1 # Avoid division by zero
        avg_roi_a = avg_npv_a / avg_cost_a if avg_cost_a != 0 else 0

        # Calculate probabilities
        prob_neg_a = np.sum(npv_a_clean < 0) / len(npv_a_clean) if len(npv_a_clean) > 0 else 0
        prob_neg_b = np.sum(npv_b_clean < 0) / len(npv_b_clean) if len(npv_b_clean) > 0 else 0

        # Probability Path B NPV is greater than Path A NPV
        # Need to ensure we compare runs where both results are valid
        valid_comparison_mask = np.isfinite(npv_a_results) & np.isfinite(npv_b_results)
        prob_b_beats_a = np.sum(npv_b_results[valid_comparison_mask] > npv_a_results[valid_comparison_mask]) / np.sum(valid_comparison_mask) if np.sum(valid_comparison_mask) > 0 else 0

        # Prob Target ROI (using basic Path A ROI) - Needs refinement if target ROI input added
        prob_roi_a = np.sum((npv_a_clean / costs_a_clean) >= target_roi) / len(costs_a_clean) if len(costs_a_clean) > 0 else 0
        # Prob Target ROI for Path B - difficult to define simply here, placeholder
        prob_roi_b = 0.0 # Placeholder - requires clearer definition of 'investment' for Path B


        results = {
            "avg_npv_a": avg_npv_a,
            "avg_npv_b": avg_npv_b,
            "prob_neg_a": prob_neg_a * 100, # Convert to percentage
            "prob_neg_b": prob_neg_b * 100,
            "prob_b_beats_a": prob_b_beats_a * 100,
            "prob_roi_a": prob_roi_a * 100, # Placeholder based on simple ROI calc
            "prob_roi_b": prob_roi_b * 100, # Placeholder
            "npv_a_raw": npv_a_clean.tolist(), # Send raw data for histogram
            "npv_b_raw": npv_b_clean.tolist(),
            "min_npv_a": np.min(npv_a_clean) if len(npv_a_clean) > 0 else 0,
            "max_npv_a": np.max(npv_a_clean) if len(npv_a_clean) > 0 else 0,
            "min_npv_b": np.min(npv_b_clean) if len(npv_b_clean) > 0 else 0,
            "max_npv_b": np.max(npv_b_clean) if len(npv_b_clean) > 0 else 0,
             # Add estimated time to value later if needed
        }
        return results

    except Exception as e:
        # Log the error server-side for debugging
        print(f"Error during simulation: {e}")
        # Return a generic error message to the client
        return {"error": f"An error occurred during simulation: {e}"}


@app.route('/')
def index():
    """Serves the main HTML page."""
    return render_template('index.html')

@app.route('/simulate', methods=['POST'])
def simulate():
    """Handles the simulation request from the frontend."""
    if not request.is_json:
        return jsonify({"error": "Request must be JSON"}), 400

    data = request.get_json()
    results = perform_monte_carlo(data)
    return jsonify(results)

# Keep the Replit standard run command from .replit file,
# but this allows local running if needed.
if __name__ == '__main__':
  app.run(host='0.0.0.0', port=5000, debug=True) # Add debug=True for development

FILE: pyproject.toml
----------------------------------------
[tool.poetry]
name = "python-template"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]

[tool.poetry.dependencies]
python = ">=3.11.0,<3.12"
flask = "^3.0.0"
gunicorn = "^21.2.0"
numpy = "^2.2.4"

[tool.pyright]
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
useLibraryCodeForTypes = true
exclude = [".cache"]

[tool.ruff]
# https://beta.ruff.rs/docs/configuration/
select = ['E', 'W', 'F', 'I', 'B', 'C4', 'ARG', 'SIM']
ignore = ['W291', 'W292', 'W293']

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

FILE: .replit
----------------------------------------
run =  ["gunicorn", "--bind", "0.0.0.0:5000", "main:app"]
entrypoint = "main.py"
modules = ["python-3.11"]

hidden = [".pythonlibs"]

[nix]
channel = "stable-24_05"

[deployment]
run =  ["gunicorn", "--bind", "0.0.0.0:5000", "main:app"]
deploymentTarget = "cloudrun"

[[ports]]
localPort = 5000
externalPort = 80


